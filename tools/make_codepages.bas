Option Base 0
Option Default None
Option Explicit On

Const LF$ = Chr$(10)
Const QU$ = Chr$(34)

main()
End

Sub main()
  Local csv_file$ = Mm.Info$(Path) + "../resources/mmb4l_codepages.csv"
  read_csv_file(csv_file$)
  Local c_file$ = Mm.Info$(Path) + "../linux-src/common/codepage.c"
  write_c_file(c_file$)
End Sub

read_csv_file()
write_c_file()
End

Sub read_csv_file(f$)
  Local i%, j%, s$

  Open f$ For Input As #1

  Line Input #1, s$
  Dim num_codepages% = Val(Field$(s$, 1, ","))

  Dim page_names$(num_codepages%)
  For i% = 1 To num_codepages%
    page_names$(i%) = Field$(s$, 2 + (i% - 1) * 4, ",")
'    Print page_names$(i%)
  Next

  Dim code_points%(128 * num_codepages%)

  ' Skip two lines.
  Line Input #1, s$
  Line Input #1, s$

  ' Read code points.
  For i% = 1 To 128
    Line Input #1, s$
    For j% = 1 To num_codepages%
      code_points%(128 * (j% - 1) + i%) = Val("&h" + Field$(s$, 2 + (j% - 1) * 4, ","))
    Next
  Next

  Close #1
End Sub

Sub write_c_file(f$)
  Local i%, j%, k%, utf8$

  Open f$ For Output As #1

  Print #1, "// This file is autogenerated from 'resources/mmb4l_codepages.csv'" LF$;
  Print #1, LF$;

  Print #1, "#include <stdlib.h>" LF$;
  Print #1, "#include <string.h>" LF$;
  Print #1, LF$;
  Print #1, "#include " QU$ "codepage.h" QU$ LF$;
  Print #1, LF$;

  Print #1, "const char * const CODEPAGE_NAMES[] = {" LF$;
  Print #1, "    " QU$ "NONE" QU$ "," LF$;
  For i% = 1 To num_codepages%
    Print #1, "    " QU$ UCase$(page_names$(i%)) QU$ "," LF$;
  Next
  Print #1, "    NULL" LF$;
  Print #1, "};" LF$;
  Print #1, LF$;

  For i% = 1 To num_codepages%
    Print #1, "static char CODEPAGE_" page_names$(i%) "_UTF8[] = {" LF$;
    For j% = 1 To 128
      utf8$ = Chr$(UTF8 code_points%(128 * (i% - 1) + j%))
      Print #1, "    ";
      For k% = 1 To 4
        If k% > Len(utf8$) Then
          Print #1, "0x00";
        Else
          Print #1, "0x" Hex$(Peek(Byte Peek(VarAddr utf8$) + k%), 2);
        EndIf
        Print #1, Choice(k% = 4, ",", ", ");
      Next
      Print #1, LF$;
    Next
    Print #1, "};" LF$;
    Print #1, LF$;
  Next

  Print #1, "char *codepage_current = NULL;" LF$;
  Print #1, LF$;

  Print #1, "int codepage_set(const char *page_name) {" LF$;
  Print #1, "    if (strcasecmp(page_name, " QU$ "NONE" QU$ ") == 0) {" LF$;
  Print #1, "        codepage_current = NULL;" LF$;
  For i% = 1 To num_codepages%
    Print #1, "    } else if (strcasecmp(page_name, " QU$ page_names$(i%) QU$ ") == 0) {" LF$;
    Print #1, "        codepage_current = CODEPAGE_" page_names$(i%) "_UTF8;" LF$;
  Next
  Print #1, "    } else {" LF$;
  Print #1, "        return -1; // Error" LF$;
  Print #1, "    }" LF$;
  Print #1, "    return 0; // Success" LF$;
  Print #1, "}" LF$;
  Print #1, LF$;

  Print #1, "int codepage_to_string(const char *codepage, char *out) {" LF$;
  Print #1, "    if (!codepage) {" LF$;
  Print #1, "        strcpy(out, " QU$ "None" QU$ ");" LF$;
  For i% = 1 To num_codepages%
    Print #1, "    } else if (codepage == CODEPAGE_" page_names$(i%) "_UTF8) {" LF$;
    Print #1, "        strcpy(out, " QU$ page_names$(i%) QU$ ");" LF$;
  Next
  Print #1, "    } else {" LF$;
  Print #1, "        return -1; // Error" LF$;
  Print #1, "    }" LF$;
  Print #1, "    return 0; // Success" LF$;
  Print #1, "}" LF$;
  Print #1, LF$;

  Close #1
End Sub
